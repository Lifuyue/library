version: '3.8'

services:
  db:
    image: postgres:16-alpine
    container_name: library-postgres
    env_file:
      - .env.postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  backend:
    build:
      context: ../..
      dockerfile: deploy/docker/Dockerfile.backend
    container_name: library-backend
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env.postgres
    environment:
      DATABASE_URL: ${DATABASE_URL}
      ENVIRONMENT: production
    volumes:
      - backend_uploads:/app/uploads
    expose:
      - "8000"   # 仅提供给前端容器访问
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  frontend:
    build:
      context: ../..
    #   dockerfile: deploy/docker/Dockerfile.frontend  # 默认名称无需指定
      dockerfile: deploy/docker/Dockerfile.frontend
    container_name: library-frontend
    depends_on:
      - backend
    ports:
      - "80:80"   # 对外暴露前端
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 5s
      retries: 3

volumes:
  pg_data:
  backend_uploads:

networks:
  default:
    name: library-net
