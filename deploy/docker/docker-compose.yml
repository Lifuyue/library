version: '3.8'

services:
  # PostgreSQL 数据库服务
  db:
    image: postgres:16-alpine
    container_name: cs-library-postgres
    env_file:
      - .env.deploy
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # 后端服务
  backend:
    build:
      context: ../..
      dockerfile: deploy/docker/Dockerfile.backend
    container_name: cs-library-backend
    ports:
      - "8000:8000"
    env_file:
      - .env.deploy
    environment:
      - APP_WORKERS=${APP_WORKERS:-2}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - backend_uploads:/app/uploads
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端服务
  frontend:
    build:
      context: ../..
      dockerfile: deploy/docker/Dockerfile.frontend
    container_name: cs-library-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  backend_uploads:
    driver: local
  pg_data:
    driver: local

networks:
  default:
    name: cs-library-network
