### 后端生产镜像 Dockerfile（改进版）
FROM python:3.11-slim AS runtime

ENV PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PYTHONDONTWRITEBYTECODE=1

WORKDIR /app

# 安装系统依赖：使用阿里云 Debian 镜像加速 (gcc / curl / libpq-dev)，失败回退官方源
RUN set -eux; \
        codename="$(. /etc/os-release && echo "$VERSION_CODENAME")"; \
        echo "Using Debian codename: $codename"; \
        cp /etc/apt/sources.list /etc/apt/sources.list.bak; \
        { \
            printf 'deb https://mirrors.aliyun.com/debian/ %s main contrib non-free non-free-firmware\n' "$codename"; \
            printf 'deb https://mirrors.aliyun.com/debian/ %s-updates main contrib non-free non-free-firmware\n' "$codename"; \
            printf 'deb https://mirrors.aliyun.com/debian/ %s-backports main contrib non-free non-free-firmware\n' "$codename"; \
            printf 'deb https://mirrors.aliyun.com/debian-security/ %s-security main contrib non-free non-free-firmware\n' "$codename"; \
        } > /etc/apt/sources.list; \
        if ! apt-get -y update; then \
            echo 'Mirror failed, restoring original sources.list'; \
            mv /etc/apt/sources.list.bak /etc/apt/sources.list; \
            apt-get -y update; \
        fi; \
        DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            gcc \
            curl \
            libpq-dev; \
        apt-get purge -y --auto-remove; \
        rm -rf /var/lib/apt/lists/*

# 先复制依赖文件以利用缓存层
COPY backend/requirements.txt ./requirements.txt
RUN pip install --upgrade pip setuptools wheel \
    && pip install --no-cache-dir -r requirements.txt

# 复制后端源代码（含 alembic 配置）
COPY backend/ ./

# 创建运行期目录（上传目录）
RUN mkdir -p /app/uploads /app/data

# 暴露端口（说明性）
EXPOSE 8000

# 健康检查（依赖 curl）
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
  CMD curl -fsS http://localhost:8000/api/health || exit 1

# 默认启动：执行迁移 + 启动 gunicorn(uvicorn worker)
# 可用环境变量 APP_WORKERS 覆盖并发数。
ENV APP_WORKERS=2
CMD ["bash", "-c", "alembic upgrade head && gunicorn -k uvicorn.workers.UvicornWorker main:app --bind 0.0.0.0:8000 --workers ${APP_WORKERS} --timeout 60"]
