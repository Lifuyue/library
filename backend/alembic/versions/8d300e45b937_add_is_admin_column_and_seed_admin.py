"""add_is_admin_column_and_seed_admin

Revision ID: 8d300e45b937
Revises: 
Create Date: 2025-08-22 02:05:43.785451

"""
from typing import Sequence, Union
from datetime import datetime
import os

from alembic import op
import sqlalchemy as sa
from passlib.context import CryptContext


# revision identifiers, used by Alembic.
revision: str = '8d300e45b937'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Check if is_admin column already exists (for existing installations)
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    
    # Get existing columns for users table
    columns = [col['name'] for col in inspector.get_columns('users')]
    
    # Add is_admin column if it doesn't exist
    if 'is_admin' not in columns:
        op.add_column('users', sa.Column('is_admin', sa.Boolean(), nullable=False, server_default=sa.false()))
    
    # Seed default admin user if no admin exists
    # Use environment variables for credentials with fallbacks
    admin_username = os.getenv('ADMIN_DEFAULT_USERNAME', 'admin')
    admin_email = os.getenv('ADMIN_DEFAULT_EMAIL', 'admin@example.com')
    admin_password = os.getenv('ADMIN_DEFAULT_PASSWORD', 'admin123')
    
    # Hash the password
    pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
    hashed_password = pwd_context.hash(admin_password)
    
    # Check if admin user already exists
    result = conn.execute(
        sa.text("SELECT COUNT(*) FROM users WHERE username = :username OR email = :email"),
        {"username": admin_username, "email": admin_email}
    ).scalar()
    
    # Create admin user if none exists with that username/email
    if result == 0:
        conn.execute(
            sa.text("""
                INSERT INTO users (username, email, hashed_password, is_active, is_admin, created_at)
                VALUES (:username, :email, :password, TRUE, TRUE, :created_at)
            """),
            {
                "username": admin_username,
                "email": admin_email,
                "password": hashed_password,
                "created_at": datetime.utcnow()
            }
        )
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Remove is_admin column
    op.drop_column('users', 'is_admin')
    
    # Note: We don't remove the admin user on downgrade as it might be in use
    # To remove admin user manually if needed:
    # DELETE FROM users WHERE username = 'admin';
    
    # ### end Alembic commands ###
